* pass (token):  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 *

# SSH SET
* ssh-keygen -t ed25519 -C "nimaeslami206@gmail.com" * # ssh key set
* cat /directory/

# GIT

# modified -> file that changes compared previous snapshot
# unmodified -> file that has no changes compared previous snapshot
# untracked -> file that is not in previous snapshot

git config --global core.editor "code --wait" # open git config on vscode
git config --global --edit # open git config editor
git config --global user.name "name" # set user name
git config --global user.email "email" # set email
git config --list # see your git config

# GETTING GIT REPOSITORY
git init # initialized git at this directory and the next directories (local)
git clone address # cloning that repo on your system (remote)

git add filename # add file to stage
git commit -m "message" # commit all of file on the stage with message
git commit # write your message with multilines on editor
git status # show status
git status -s # show summarized status
git reset filename # reset staged to unstaged

git checkout file # reset file to the first snapshot
git checkout branchname # switch to this branch
git checkout -b branchname # create and switch to this branch
git checkout -b local_branchname remotename/branchname # create branch in local that exist in remote and get it from the branch of remote to your local branch

git add "*.py" # add all of files that are .py

git diff file/directory # show difference of files that modified and unstaged on terminal
git difftool # show difference of files that modified and unstaged on vscode
git diff --staged file/directory # show difference of files that modified and staged on terminal
git difftool --staged # show difference of files that modified and staged on vscode 
git diff hashcode # show difference of files that modified with that hashcode snapshot (also difftool)
git diff -y # show all continuously (also difftool)

git rm filename # remove that file and save deleted file on your repository (you can restore by 'git restebut' or 'git checkout'
	if file modified, show you an error to sure you want delete that file and you can write 'git rm -f' to remove from hard disk or write 'git rm --cached' to just remove from your repository

git mv file/folder directory # move file/folder to directory

git log # see our commits
git log -p # see our commit details
git log --pretty=format:"%h, %an: %s" # show commit by this format (hashcode, auther name: message)
git log --since=2.week/day/year/... # show by time
git log -S "string" # show commits that have this string
git log --oneline --graph # show log in one line and graph

git commit --amend # add this commit to the last commit an looklike edit the last commit

git remote add origin url # add remote to your local project
git remote remove origin (name of repo) # remove remote from your local project
git remote -v # show remote details
git branch -a # see all of branch
git push origin master # push  branch (master) in to remote (origin) 
git push origin tagname # push tag in to remote (origin)
git push origin --tags # push all tags in to remote (origin)
git push -u origin master # you can set origin masrwe by defoult and for next push write 'git push'
git push remotename -delete branchname # delete branch of the remote
gt push remotename -delete tagname # delete tag from remote

git tag # show tags
git tag tagname # create tag for last commit
git tag tagname hashcode # create tag for commit with this hashcode
git tag -a tagname -m "message" # create annotated tag with message
git tag -a tagname -m "message" hashcode # create annotated tag with message for commit that has this hashcode
git show tagname # show the last commit with tag

git config --global alias.x 'instruction with out git' # you can set this and then write 'git x' and do instruction

git branch # show your branches
git branch name # create branch
git branch -d # delete brranch
git branch --merged # check merged branches
git branch --no-merged # check not merged branches

# Merging -> if you want merge 2 branch, at first you need to go to on destination branch then:
	1. if destinatin branch has no changes and just another branch hass changes: "git merge starting branch # merge"
	2. if both of them have change when you erite above instruction, git make a new commit and system open the editor to write your commit message
	3. if both of tem have changes and chamges are on same file, at first you must determine your changes and then add and commit them.(if you want to escape from this conflict write "git merge --abrot")

git merge startingbranch # merge

git fetch origin (name of repo) # fetch branch and changes from remote to your local
git merge startingbranch # merge

git pull origin main # equals above 2 instructions

# Rebase: rebase is good when you want to decrease your graph but if one person pull from same branch before your rebase, because of different parrent, we have different version of file, and better to dont rebase

at first you must to go at the brancg that you want to change its base then write:
git rebase branch(base) # at this case you must to see the confkicts on vs code and save changes then add and commit your file
git rebase --continue # write your new message for new commit then you can merge to branches "git merge branchname"

# FORK

1.you can clone repo and then fork.
2.change or edit files and then push into branch and remote that you created.
3.pull request in github to branch and remote that you clone from that.



